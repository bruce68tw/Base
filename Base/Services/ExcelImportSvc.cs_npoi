using AngleSharp.Dom;
using Base.Enums;
using Base.Models;
using MathNet.Numerics.Distributions;
using NPOI.SS.UserModel;
using NPOI.SS.Util;
using NPOI.XSSF.UserModel;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

// Excel import
namespace Base.Services
{
    public class ExcelImportSvc<T> where T : class, new()
    {
        //constant
        const string RowSep = "\r\n";  //row seperator
        
        //ok excel row no
        private List<int> _okRowNos = [];

        //failed excel row no/msg
        private List<SnStrDto> _failRows = [];

        /// <summary>
        /// import by stream
        /// </summary>
        /// <param name="stream"></param>
        /// <param name="importDto"></param>
        /// <param name="fileName"></param>
        /// <param name="uiDtFormat"></param>
        /// <param name="writeLog">是否寫入XpImportLog table, 如果要自行控制寫入log, 則設為false</param>
        /// <returns></returns>
        public async Task<ResultImportDto> ImportByStreamA(Stream stream, ExcelImportDto<T> importDto,
            string dirUpload, string fileName, string uiDtFormat, bool writeLog)
        {
            stream.Position = 0;
            var docx = new XSSFWorkbook(stream);
            var result = await ImportByDocxA(docx, importDto, dirUpload, fileName, uiDtFormat, writeLog);
            return result;
        }

        /// <summary>
        /// import by excel docx
        /// excel row/cell (base 0)
        /// </summary>
        /// <param name="docx"></param>
        /// <param name="importDto"></param>
        /// <param name="fileName">imported excel file name</param>
        /// <param name="uiDtFormat">excel裡面的datetime日期格式</param>
        /// <param name="writeLog">是否寫入XpImportLog table, 如果要自行控制寫入log, 則設為false</param>
        /// <returns>error msg if any</returns>
        public async Task<ResultImportDto> ImportByDocxA(IWorkbook docx, ExcelImportDto<T> importDto, 
            string dirUpload, string fileName, string uiDtFormat, bool writeLog)
        {
            //set variables: 
            var sheet = docx.GetSheetAt(importDto.SheetNo);
            //var excelRows = sheet.GetRowEnumerator();   //只傳回非空白列
            var ssTable = new Dictionary<int, string>(); // NPOI 沒有 SharedStringTable, 使用字典儲存

            #region set importDto.ExcelFids, excelFidLen
            int no;
            var colNameNos = new Dictionary<string, int>();
            var firstRow = sheet.GetRow(importDto.FidRowNo - 1);
            var excelFids = new List<string>();
            var excelFnos = new List<int>();

            if (importDto.ExcelFids == null || importDto.ExcelFids.Count == 0)
            {
                //如果沒有傳入excel欄位名稱, 則使用第一行excel做為欄位名稱(不可有合併儲存格!!)
                no = 0;
                foreach (ICell cell in firstRow)
                {
                    excelFids.Add(cell.ToString());
                    excelFnos.Add(no);
                    colNameNos[cell.Address.FormatAsString().Replace("$", "")] = no;
                    no++;
                }
            }
            else
            {
                no = 0;
                for (var i = 0; i < importDto.ExcelFids.Count; i++)
                {
                	//空白表示有合併儲存格
                    if (importDto.ExcelFids[i] == "") continue;

                    excelFids.Add(importDto.ExcelFids[i]);
                    excelFnos.Add(i);
                    var colName = ((char)('A' + i)).ToString();
                    colNameNos[colName] = i;
                    no++;
                }
            }

            var excelFidLen = excelFids.Count;
            #endregion

            #region set excelIsDates, modelFids, modelDateFids/Fno/Len, modelNotDateFids/Fno/Len
            int fno;
            var modelFidTypes = new Dictionary<string, string>();
            var model = new T();
            foreach (var prop in model.GetType().GetProperties())
            {
                //如果對應的excel欄位不存在, 則不記錄此欄位(skip)
                //var type = prop.GetValue(model, null).GetType();
                var fid = prop.Name;
                fno = excelFids.FindIndex(a => a == fid);
                if (fno < 0) continue;

                // 判斷是否為可空類型，提取基礎類型
                var type = prop.PropertyType;
                var underlyingType = Nullable.GetUnderlyingType(type) ?? type;
                var typeName = underlyingType.Name;

                //var typeName = prop.PropertyType.Name;
                var ftype = typeName.Contains("DateTime") ? ModelTypeEstr.Datetime :
                    typeName.Contains("Int") ? ModelTypeEstr.Int :
                    ModelTypeEstr.String;

                modelFidTypes.Add(fid, ftype);
            }
            #endregion

            #region set fileRows by excel file
            var fileRows = new List<T>();	//excel rows with data(not empty row)
            for (var i=importDto.FidRowNo; i <= sheet.LastRowNum; i++)
            {
                //遇空白列則離開
                var row = sheet.GetRow(i);
                if (row == null || row.Cells.Count == 0) break;     

                var fileRow = new T();
                no = 0;
                foreach (var col in colNameNos)
                {
                    var cell = row.GetCell(col.Value);
                    var value = cell?.ToString() ?? "";
                    var fid = excelFids[no];
                    var ftype = modelFidTypes[fid];

                    object value2 =
                        (ftype == ModelTypeEstr.Datetime) ? DateTime.FromOADate(double.Parse(value)).ToString(uiDtFormat) :
                        (ftype == ModelTypeEstr.Int) ? Convert.ToInt32(string.IsNullOrEmpty(value) ? "0" : value) :
                        value!;

                    _Model.SetValue(fileRow, fid, value2);
                    no++;
                }

                fileRows.Add(fileRow);
            }
            #endregion

            #region 2.validate fileRows loop
            no = 0;
            foreach (var fileRow in fileRows)
            {
                //validate
                var context = new ValidationContext(fileRow, null, null);
                var results = new List<ValidationResult>();
                if (Validator.TryValidateObject(fileRow, context, results, true))
                {
                    _okRowNos.Add(no);
                }
                else
                {
                    AddErrorByResults(no, results);
                }
                no++;
            }
            #endregion

            #region 3.save database for ok rows(call FnSaveImportRows())
            if (_okRowNos.Count > 0)
            {
                var okRows = _okRowNos.Select(idx => fileRows[idx]).ToList();
                var saveResults = importDto.FnSaveImportRows!(okRows);
                if (saveResults != null)
                {
                    for (int i = 0; i < saveResults.Count; i++)
                    {
                        if (_Str.NotEmpty(saveResults[i]))
                            AddError(_okRowNos[i], saveResults[i]);
                    }
                }
            }
            #endregion

            //4.save ok excel file
            if (_Str.IsEmpty(importDto.LogRowId))
                importDto.LogRowId = _Str.NewId();
            var fileStem = _Str.AddDirSep(dirUpload) + importDto.LogRowId;
            _Office.DocxToFile(docx, fileStem + ".xlsx");

            #region 5.save fail excel file (tail _fail.xlsx)
            var failCount = _failRows.Count;
            if (failCount > 0)
            {
                //get docx
                var failFilePath = fileStem + "_fail.xlsx";
                File.Copy(importDto.TplPath, failFilePath, true);

                var fs2 = new FileStream(failFilePath, FileMode.Open, FileAccess.ReadWrite);
                var docx2 = new XSSFWorkbook(fs2);
                var sheet2 = docx2.GetSheetAt(0);

                //新增空白列(含格式, 合併儲存格)
                var startRow = importDto.FidRowNo;    //insert position
                if (failCount > 1)
                    CopyTplRows(sheet2, startRow, failCount - 1);

                for (var i = 0; i < failCount; i++)
                {
                    //add row, fill value & copy row style
                    var row = sheet2.GetRow(startRow + i) ?? sheet2.CreateRow(startRow + i);
                    var modelRow = fileRows[_failRows[i].Sn];
                    for (var ci = 0; ci < excelFidLen; ci++)
                    {
                        fno = excelFnos[ci];
                        var value = _Model.GetValue(modelRow, excelFids[ci]);
                        var cell = row.GetCell(fno) ?? row.CreateCell(fno);
                        cell.SetCellValue(value?.ToString() ?? string.Empty);
                        cell.SetCellType(CellType.String); // 設定為字串
                    }

                    //write cell for error msg
                    var errorCell = row.CreateCell(row.LastCellNum);
                    errorCell.SetCellValue(_failRows[i].Str);
                    errorCell.SetCellType(CellType.String);
                }

                _Office.DocxToFile(docx2, failFilePath);
                fs2.Close();
            }
            #endregion

            #region 6.insert XpImportLog table if need
            var totalCount = fileRows.Count;
            var okCount = totalCount - _failRows.Count;
            if (writeLog)
            {
                var sql = $@"
insert into dbo.XpImportLog(Id, Type, FileName,
OkCount, FailCount, TotalCount,
CreatorName, Created)
values('{importDto.LogRowId}', '{importDto.ImportType}', '{fileName}',
{okCount}, {failCount}, {totalCount}, 
'{importDto.CreatorName}', '{_Date.NowDbStr()}')
";
                await _Db.ExecSqlA(sql);
            }
            #endregion

            //7.return import result
            return new ResultImportDto()
            {
                LogRowId = importDto.LogRowId,
                OkCount = okCount,
                FailCount = _failRows.Count,
                TotalCount = totalCount,
            };
        }

        private ICell GetOrCreateCell(IRow row, int columnIndex)
        {
            var cell = row.GetCell(columnIndex) ?? row.CreateCell(columnIndex);
            return cell;
        }

        /// <summary>
        /// 從template row 複製多筆空白列
        /// </summary>
        /// <param name="sheet"></param>
        /// <param name="fromRow">來源Row, base 0</param>
        /// <param name="newRows">需要新增加的列數, 扣除範本這一列</param>
        private void CopyTplRows(ISheet sheet, int fromRow, int newRows)
        {
            // 取得範本列
            var tplRow = sheet.GetRow(fromRow);
            if (tplRow == null) return;

            // 複製合併儲存格資訊
            var mergedRegions = new List<CellRangeAddress>();
            for (int i = 0; i < sheet.NumMergedRegions; i++)
            {
                var range = sheet.GetMergedRegion(i);
                if (range.FirstRow == fromRow && range.LastRow == fromRow)
                    mergedRegions.Add(range);
            }

            // 插入新列
            for (int ri = 1; ri <= newRows; ri++)
            {
                int newRowIndex = fromRow + ri;
                var newRow = sheet.CreateRow(newRowIndex);

                // 設定新列的行高與範本列一致
                newRow.Height = tplRow.Height;

                for (int ci = 0; ci < tplRow.LastCellNum; ci++)
                {
                    var tplCell = tplRow.GetCell(ci);
                    if (tplCell == null) continue;

                    var newCell = newRow.CreateCell(ci);
                    newCell.CellStyle = tplCell.CellStyle;
                    newCell.SetCellType(tplCell.CellType);
                    if (tplCell.CellType == CellType.String)
                        newCell.SetCellValue("");
                }

                // 複製合併儲存格（更新為新列號）
                foreach (var range in mergedRegions)
                {
                    var newRange = new CellRangeAddress(newRowIndex, newRowIndex, range.FirstColumn, range.LastColumn);
                    sheet.AddMergedRegion(newRange);
                }
            }
        }

        private string GetCellValue(ICell cell)
        {
            return cell?.ToString() ?? string.Empty;
        }


        //=== no change ===
        /// <summary>
        /// add row error
        /// </summary>
        /// <param name="error"></param>
        public void AddError(int rowNo, string error)
        {
            if (error != "")
            {
                _failRows.Add(new SnStrDto()
                {
                    Sn = rowNo,
                    Str = error,
                });
            }
        }

        /// <summary>
        /// add row error for multiple error msg
        /// </summary>
        /// <param name="rowNo"></param>
        /// <param name="results"></param>
        private void AddErrorByResults(int rowNo, List<ValidationResult> results)
        {
            var error = string.Join(RowSep, results.Select(a => a.ErrorMessage).ToList());
            AddError(rowNo, error);
        }

        /*
        //get excel column english name
        private static string GetColName(int index)
        {
            const string letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string columnName = "";

            while (index >= 0)
            {
                columnName = letters[index % 26] + columnName;
                index = index / 26 - 1;
            }

            return columnName;
        }
        */

        #region remark code
        /*
        //excel docx to datatable
        private DataTable DocxToDataTable(SpreadsheetDocument docx)
        {
            //open excel
            WorkbookPart wbPart = docx.WorkbookPart;
            SharedStringTablePart ssPart = wbPart.GetPartsOfType<SharedStringTablePart>().First();
            SharedStringTable ssTable = ssPart.SharedStringTable;

        }

        //驗証資料列是否正確
        public bool ValidDto(T dto)
        {
            //欄位驗証
            var context = new ValidationContext(dto, null, null);
            var results = new List<ValidationResult>();
            if (Validator.TryValidateObject(dto, context, results, true))
                return true;

            //case of error
            AddErrorByResults(results);
            return false;
        }

        private string Init(string asposeLicPath, string uploadFileName, string saveExcelPath, string tplPath, string sheetName)
        {
            //set instance variables
            this.asposeLicPath = asposeLicPath;
            this.uploadFileName = uploadFileName;
            this.saveExcelPath = saveExcelPath;
            this.tplPath = tplPath;
            this.sheetName = sheetName;
            this.sysFileName = Path.GetFileName(saveExcelPath);

            //建立excel connection
            var excelBook = Utils.OpenExcel(asposeLicPath, saveExcelPath);

            //set dataTable _dt
            var error = "";
            this.dt = Utils.ReadWorksheet(excelBook, sheetName, 0, 0, out error, true);
            return error;
        }

        /// <summary>
        /// 驗証excel資料列
        /// </summary>
        /// <returns>status</returns>
        protected void CheckRows()
        {
            //set instance variables
            this.nowIndex = 0;

            //check rows
            foreach (DataRow dr in dt.Rows)
            {
                //reset rowError
                this.rowError = new List<string>();

                //check row
                var model = CheckTableRow(dr);
                if (model != null)
                    okRows.Add(model);

                this.nowIndex++;
            }
        }

        //save error result to excel file
        protected void SaveErrorToExcel(int startRow, int colLen)
        {
            //check
            if (this._errorRows.Count == 0)
                return;

            //copy excel & add _fail for file name
            var fileName = Path.GetDirectoryName(this.saveExcelPath) + _Fun.DirSep
                + Path.GetFileNameWithoutExtension(this.saveExcelPath)
                + "_fail" + Path.GetExtension(this.saveExcelPath);
            File.Copy(this.tplPath, fileName, true);

            //set excel object
            Workbook excel = Utils.OpenExcel(asposeLicPath, fileName);
            //Workbook excel = Utils.NewExcel(asposeLicPath);
            Worksheet sheet = excel.Worksheets[this.sheetName];
            Cells cells = sheet.Cells;

            //set variables
            var addRow = 0; //寫入筆數
            //var colLen = dt.Columns.Count;  //匯入excel檔的欄位數
            //var colLen = dt.Columns.Count;  //匯入excel檔的欄位數
            //var colLen2 = colLen + 1;       //error excel檔的欄位數要加1

            //column index to string
            var colStrs = new string[colLen + 1];
            for (var i = 0; i <= colLen; i++)
                colStrs[i] = ColNumToStr(i + 1);

            //寫入error excel
            foreach (var errorRow in _errorRows)
            {
                //copy/paste row
                var rowPos = startRow + addRow;
                if (addRow > 0)
                {
                    //add row & copy row height
                    cells.InsertRow(rowPos - 1);   //base 1 !! insert after
                    cells.SetRowHeight(rowPos - 1, cells.GetRowHeight(startRow)); //base 1 !!

                    //copy styles(background/foreground colors, fonts, alignment styles etc.)
                    for (int col = 0; col <= colLen; col++)
                        cells[rowPos, col].Style = cells[startRow, col].Style;    //base 1 !!
                }

                //fill row
                var dtRow = this.dt.Rows[errorRow.Key];
                var rowStr = rowPos.ToString();
                for (var i = 0; i < colLen; i++)
                    cells[colStrs[i] + rowStr].PutValue(dtRow[i].ToString());

                //write error msg
                cells[colStrs[colLen] + rowStr].PutValue(errorRow.Value);
                addRow++;
            }
            excel.Save(fileName);
        }

        /// <summary>
        /// 檢查目前這一筆資料的狀態, true(正確), false(有誤)
        /// </summary>
        /// <returns></returns>
        protected bool NowRowStatus()
        {
            return (this.rowError.Count() == 0);
        }

        public void AddOk(int rowNo)
        {
            _okRowNos.Add(rowNo);
        }

        //excel column number to letter string
        //colNo: base 1
        private string ColNumToStr(int colNo)
        {
            int div = colNo;
            string colStr = String.Empty;
            int mod = 0;

            while (div > 0)
            {
                mod = (div - 1) % 26;
                colStr = (char)(65 + mod) + colStr;
                div = (int)((div - mod) / 26);
            }
            return colStr;
        }

        #region 欄位值 parsing function
        protected int? ParseIntAndLog(string colName, string value)
        {
            if (String.IsNullOrEmpty(value))
                return (int?)null;

            int value2;
            if (int.TryParse(value, out value2))
                return value2;

            rowError.Add(colName + _inputError);
            return (int?)null;
        }

        protected decimal? ParseDecimalAndLog(string colName, string value)
        {
            //return String.IsNullOrEmpty(value) ? (decimal?)null : decimal.Parse(value);
            if (String.IsNullOrEmpty(value))
                return (decimal?)null;

            decimal value2;
            if (decimal.TryParse(value, out value2))
                return value2;

            rowError.Add(colName + _inputError);
            return (decimal?)null;
        }

        protected DateTime? ParseDatetimeAndLog(string colName, string value)
        {
            if (String.IsNullOrEmpty(value))
                return (DateTime?)null;

            DateTime value2;
            if (DateTime.TryParse(value, out value2))
                return value2;

            rowError.Add(colName + _inputError);
            return (DateTime?)null;
        }
        #endregion
        */

        #endregion

    }//class
}
